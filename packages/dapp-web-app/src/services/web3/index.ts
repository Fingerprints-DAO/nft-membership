// Generated by @wagmi/cli@1.3.0 on 8/3/2023 at 11:49:23 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// prints
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const printsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'decimals', outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'addr', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// migration
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const migrationABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_adminAddress', internalType: 'address', type: 'address' },
      { name: '_nftAddress', internalType: 'address', type: 'address' },
      { name: '_printsAddress', internalType: 'address', type: 'address' },
      { name: '_pricePerMembershipInWei', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint16', type: 'uint16', indexed: false },
    ],
    name: 'Migrated',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Paused' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Unpaused' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'migrate',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'nftAddress', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'pricePerMembershipInWei',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'printsAddress', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'token', outputs: [{ name: '', internalType: 'contract IERC20', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// membership
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const membershipABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_baseURIValue', internalType: 'string', type: 'string' },
      { name: '_adminAddress', internalType: 'address', type: 'address' },
      { name: '_payoutAddress', internalType: 'address', type: 'address' },
      { name: '_royaltyFee', internalType: 'uint96', type: 'uint96' },
    ],
  },
  { type: 'error', inputs: [], name: 'InvalidShortString' },
  { type: 'error', inputs: [], name: 'MaxSupplyExceeded' },
  { type: 'error', inputs: [{ name: 'operator', internalType: 'address', type: 'address' }], name: 'OperatorNotAllowed' },
  { type: 'error', inputs: [{ name: 'str', internalType: 'string', type: 'string' }], name: 'StringTooLong' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newBaseURI', internalType: 'string', type: 'string', indexed: false }],
    name: 'BaseURIChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'payoutAddress', internalType: 'address', type: 'address', indexed: false },
      { name: 'royaltyFee', internalType: 'uint96', type: 'uint96', indexed: false },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegator', internalType: 'address', type: 'address', indexed: true },
      { name: 'fromDelegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'toDelegate', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'DelegateChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'delegate', internalType: 'address', type: 'address', indexed: true },
      { name: 'previousBalance', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'newBalance', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DelegateVotesChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'EIP712DomainChanged' },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Paused' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'previousAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'newAdminRole', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Transfer',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Unpaused' },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'CLOCK_MODE', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MAX_SUPPLY', outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'MINTER_ROLE', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'OPERATOR_FILTER_REGISTRY',
    outputs: [{ name: '', internalType: 'contract IOperatorFilterRegistry', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_operator', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'baseURIValue', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'clock', outputs: [{ name: '', internalType: 'uint48', type: 'uint48' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delegatee', internalType: 'address', type: 'address' }],
    name: 'delegate',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'delegatee', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'delegateBySig',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'delegates',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      { name: 'fields', internalType: 'bytes1', type: 'bytes1' },
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'verifyingContract', internalType: 'address', type: 'address' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
      { name: 'extensions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'timepoint', internalType: 'uint256', type: 'uint256' }],
    name: 'getPastTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'timepoint', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPastVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_amount', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'safeMint',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_newBaseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_payoutAddress', internalType: 'address', type: 'address' },
      { name: '_royaltyFee', internalType: 'uint96', type: 'uint96' },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'symbol', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'tokenOfOwnerByIndex',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'totalSupply', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_from', internalType: 'address', type: 'address' },
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__.
 */
export function usePrintsRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: printsABI, ...config } as UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"allowance"`.
 */
export function usePrintsAllowance<TFunctionName extends 'allowance', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'allowance', ...config } as UseContractReadConfig<
    typeof printsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"balanceOf"`.
 */
export function usePrintsBalanceOf<TFunctionName extends 'balanceOf', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof printsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"decimals"`.
 */
export function usePrintsDecimals<TFunctionName extends 'decimals', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'decimals', ...config } as UseContractReadConfig<
    typeof printsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"name"`.
 */
export function usePrintsName<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'name', ...config } as UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"symbol"`.
 */
export function usePrintsSymbol<TFunctionName extends 'symbol', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'symbol', ...config } as UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"totalSupply"`.
 */
export function usePrintsTotalSupply<TFunctionName extends 'totalSupply', TSelectData = ReadContractResult<typeof printsABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof printsABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: printsABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof printsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__.
 */
export function usePrintsWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof printsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof printsABI, TFunctionName, TMode>({ abi: printsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"approve"`.
 */
export function usePrintsApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'approve'>['request']['abi'], 'approve', TMode> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<typeof printsABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'approve', TMode>({ abi: printsABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrintsDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'decreaseAllowance'>['request']['abi'], 'decreaseAllowance', TMode> & {
        functionName?: 'decreaseAllowance'
      }
    : UseContractWriteConfig<typeof printsABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'decreaseAllowance', TMode>({ abi: printsABI, functionName: 'decreaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrintsIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'increaseAllowance'>['request']['abi'], 'increaseAllowance', TMode> & {
        functionName?: 'increaseAllowance'
      }
    : UseContractWriteConfig<typeof printsABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'increaseAllowance', TMode>({ abi: printsABI, functionName: 'increaseAllowance', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"mint"`.
 */
export function usePrintsMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'mint'>['request']['abi'], 'mint', TMode> & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof printsABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'mint', TMode>({ abi: printsABI, functionName: 'mint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrintsTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'transfer'>['request']['abi'], 'transfer', TMode> & {
        functionName?: 'transfer'
      }
    : UseContractWriteConfig<typeof printsABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'transfer', TMode>({ abi: printsABI, functionName: 'transfer', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrintsTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof printsABI, 'transferFrom'>['request']['abi'], 'transferFrom', TMode> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof printsABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof printsABI, 'transferFrom', TMode>({ abi: printsABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__.
 */
export function usePreparePrintsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, ...config } as UsePrepareContractWriteConfig<typeof printsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"approve"`.
 */
export function usePreparePrintsApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<typeof printsABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePreparePrintsDecreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'decreaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'decreaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof printsABI,
    'decreaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePreparePrintsIncreaseAllowance(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'increaseAllowance'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'increaseAllowance', ...config } as UsePrepareContractWriteConfig<
    typeof printsABI,
    'increaseAllowance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"mint"`.
 */
export function usePreparePrintsMint(config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'mint'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'mint', ...config } as UsePrepareContractWriteConfig<typeof printsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"transfer"`.
 */
export function usePreparePrintsTransfer(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'transfer'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'transfer', ...config } as UsePrepareContractWriteConfig<
    typeof printsABI,
    'transfer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link printsABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePreparePrintsTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof printsABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: printsABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof printsABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link printsABI}__.
 */
export function usePrintsEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof printsABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: printsABI, ...config } as UseContractEventConfig<typeof printsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link printsABI}__ and `eventName` set to `"Approval"`.
 */
export function usePrintsApprovalEvent(config: Omit<UseContractEventConfig<typeof printsABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: printsABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof printsABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link printsABI}__ and `eventName` set to `"Transfer"`.
 */
export function usePrintsTransferEvent(config: Omit<UseContractEventConfig<typeof printsABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: printsABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof printsABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__.
 */
export function useMigrationRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: migrationABI, ...config } as UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMigrationDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: migrationABI, functionName: 'DEFAULT_ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMigrationGetRoleAdmin<TFunctionName extends 'getRoleAdmin', TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: migrationABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMigrationHasRole<TFunctionName extends 'hasRole', TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: migrationABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"nftAddress"`.
 */
export function useMigrationNftAddress<TFunctionName extends 'nftAddress', TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: migrationABI, functionName: 'nftAddress', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"paused"`.
 */
export function useMigrationPaused<TFunctionName extends 'paused', TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: migrationABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"pricePerMembershipInWei"`.
 */
export function useMigrationPricePerMembershipInWei<
  TFunctionName extends 'pricePerMembershipInWei',
  TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: migrationABI, functionName: 'pricePerMembershipInWei', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"printsAddress"`.
 */
export function useMigrationPrintsAddress<
  TFunctionName extends 'printsAddress',
  TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: migrationABI, functionName: 'printsAddress', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMigrationSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: migrationABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"token"`.
 */
export function useMigrationToken<TFunctionName extends 'token', TSelectData = ReadContractResult<typeof migrationABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof migrationABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: migrationABI, functionName: 'token', ...config } as UseContractReadConfig<
    typeof migrationABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__.
 */
export function useMigrationWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof migrationABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, TFunctionName, TMode>({ abi: migrationABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMigrationGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'grantRole'>['request']['abi'], 'grantRole', TMode> & {
        functionName?: 'grantRole'
      }
    : UseContractWriteConfig<typeof migrationABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'grantRole', TMode>({ abi: migrationABI, functionName: 'grantRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"migrate"`.
 */
export function useMigrationMigrate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'migrate'>['request']['abi'], 'migrate', TMode> & {
        functionName?: 'migrate'
      }
    : UseContractWriteConfig<typeof migrationABI, 'migrate', TMode> & {
        abi?: never
        functionName?: 'migrate'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'migrate', TMode>({ abi: migrationABI, functionName: 'migrate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"pause"`.
 */
export function useMigrationPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'pause'>['request']['abi'], 'pause', TMode> & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof migrationABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'pause', TMode>({ abi: migrationABI, functionName: 'pause', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMigrationRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'renounceRole'>['request']['abi'], 'renounceRole', TMode> & {
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof migrationABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'renounceRole', TMode>({ abi: migrationABI, functionName: 'renounceRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMigrationRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'revokeRole'>['request']['abi'], 'revokeRole', TMode> & {
        functionName?: 'revokeRole'
      }
    : UseContractWriteConfig<typeof migrationABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'revokeRole', TMode>({ abi: migrationABI, functionName: 'revokeRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"unpause"`.
 */
export function useMigrationUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof migrationABI, 'unpause'>['request']['abi'], 'unpause', TMode> & {
        functionName?: 'unpause'
      }
    : UseContractWriteConfig<typeof migrationABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof migrationABI, 'unpause', TMode>({ abi: migrationABI, functionName: 'unpause', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__.
 */
export function usePrepareMigrationWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, ...config } as UsePrepareContractWriteConfig<typeof migrationABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMigrationGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'grantRole', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"migrate"`.
 */
export function usePrepareMigrationMigrate(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'migrate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'migrate', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'migrate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMigrationPause(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'pause', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'pause'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMigrationRenounceRole(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'renounceRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'renounceRole', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMigrationRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'revokeRole', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMigrationUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof migrationABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: migrationABI, functionName: 'unpause', ...config } as UsePrepareContractWriteConfig<
    typeof migrationABI,
    'unpause'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__.
 */
export function useMigrationEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof migrationABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: migrationABI, ...config } as UseContractEventConfig<typeof migrationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"Migrated"`.
 */
export function useMigrationMigratedEvent(config: Omit<UseContractEventConfig<typeof migrationABI, 'Migrated'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: migrationABI, eventName: 'Migrated', ...config } as UseContractEventConfig<typeof migrationABI, 'Migrated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"Paused"`.
 */
export function useMigrationPausedEvent(config: Omit<UseContractEventConfig<typeof migrationABI, 'Paused'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: migrationABI, eventName: 'Paused', ...config } as UseContractEventConfig<typeof migrationABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMigrationRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof migrationABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: migrationABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof migrationABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMigrationRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof migrationABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: migrationABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<typeof migrationABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMigrationRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof migrationABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: migrationABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<typeof migrationABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link migrationABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMigrationUnpausedEvent(config: Omit<UseContractEventConfig<typeof migrationABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: migrationABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<typeof migrationABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__.
 */
export function useMembershipRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: membershipABI, ...config } as UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"CLOCK_MODE"`.
 */
export function useMembershipClockMode<TFunctionName extends 'CLOCK_MODE', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'CLOCK_MODE', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useMembershipDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'DEFAULT_ADMIN_ROLE', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMembershipDomainSeparator<
  TFunctionName extends 'DOMAIN_SEPARATOR',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'DOMAIN_SEPARATOR', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"MAX_SUPPLY"`.
 */
export function useMembershipMaxSupply<TFunctionName extends 'MAX_SUPPLY', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'MAX_SUPPLY', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useMembershipMinterRole<TFunctionName extends 'MINTER_ROLE', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'MINTER_ROLE', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"OPERATOR_FILTER_REGISTRY"`.
 */
export function useMembershipOperatorFilterRegistry<
  TFunctionName extends 'OPERATOR_FILTER_REGISTRY',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'OPERATOR_FILTER_REGISTRY', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMembershipBalanceOf<TFunctionName extends 'balanceOf', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"baseURIValue"`.
 */
export function useMembershipBaseUriValue<
  TFunctionName extends 'baseURIValue',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'baseURIValue', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"clock"`.
 */
export function useMembershipClock<TFunctionName extends 'clock', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'clock', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"delegates"`.
 */
export function useMembershipDelegates<TFunctionName extends 'delegates', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'delegates', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"eip712Domain"`.
 */
export function useMembershipEip712Domain<
  TFunctionName extends 'eip712Domain',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'eip712Domain', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"getApproved"`.
 */
export function useMembershipGetApproved<TFunctionName extends 'getApproved', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'getApproved', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"getPastTotalSupply"`.
 */
export function useMembershipGetPastTotalSupply<
  TFunctionName extends 'getPastTotalSupply',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'getPastTotalSupply', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"getPastVotes"`.
 */
export function useMembershipGetPastVotes<
  TFunctionName extends 'getPastVotes',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'getPastVotes', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useMembershipGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'getRoleAdmin', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"getVotes"`.
 */
export function useMembershipGetVotes<TFunctionName extends 'getVotes', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'getVotes', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"hasRole"`.
 */
export function useMembershipHasRole<TFunctionName extends 'hasRole', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'hasRole', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useMembershipIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"name"`.
 */
export function useMembershipName<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'name', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"nonces"`.
 */
export function useMembershipNonces<TFunctionName extends 'nonces', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'nonces', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useMembershipOwnerOf<TFunctionName extends 'ownerOf', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"paused"`.
 */
export function useMembershipPaused<TFunctionName extends 'paused', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useMembershipRoyaltyInfo<TFunctionName extends 'royaltyInfo', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'royaltyInfo', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useMembershipSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"symbol"`.
 */
export function useMembershipSymbol<TFunctionName extends 'symbol', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'symbol', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"tokenByIndex"`.
 */
export function useMembershipTokenByIndex<
  TFunctionName extends 'tokenByIndex',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'tokenByIndex', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 */
export function useMembershipTokenOfOwnerByIndex<
  TFunctionName extends 'tokenOfOwnerByIndex',
  TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: membershipABI, functionName: 'tokenOfOwnerByIndex', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useMembershipTokenUri<TFunctionName extends 'tokenURI', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'tokenURI', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMembershipTotalSupply<TFunctionName extends 'totalSupply', TSelectData = ReadContractResult<typeof membershipABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof membershipABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: membershipABI, functionName: 'totalSupply', ...config } as UseContractReadConfig<
    typeof membershipABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__.
 */
export function useMembershipWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof membershipABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, TFunctionName, TMode>({ abi: membershipABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"approve"`.
 */
export function useMembershipApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'approve'>['request']['abi'], 'approve', TMode> & {
        functionName?: 'approve'
      }
    : UseContractWriteConfig<typeof membershipABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'approve', TMode>({ abi: membershipABI, functionName: 'approve', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"burn"`.
 */
export function useMembershipBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'burn'>['request']['abi'], 'burn', TMode> & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof membershipABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'burn', TMode>({ abi: membershipABI, functionName: 'burn', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"delegate"`.
 */
export function useMembershipDelegate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'delegate'>['request']['abi'], 'delegate', TMode> & {
        functionName?: 'delegate'
      }
    : UseContractWriteConfig<typeof membershipABI, 'delegate', TMode> & {
        abi?: never
        functionName?: 'delegate'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'delegate', TMode>({ abi: membershipABI, functionName: 'delegate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function useMembershipDelegateBySig<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'delegateBySig'>['request']['abi'], 'delegateBySig', TMode> & {
        functionName?: 'delegateBySig'
      }
    : UseContractWriteConfig<typeof membershipABI, 'delegateBySig', TMode> & {
        abi?: never
        functionName?: 'delegateBySig'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'delegateBySig', TMode>({ abi: membershipABI, functionName: 'delegateBySig', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"grantRole"`.
 */
export function useMembershipGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'grantRole'>['request']['abi'], 'grantRole', TMode> & {
        functionName?: 'grantRole'
      }
    : UseContractWriteConfig<typeof membershipABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'grantRole', TMode>({ abi: membershipABI, functionName: 'grantRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"pause"`.
 */
export function useMembershipPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'pause'>['request']['abi'], 'pause', TMode> & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof membershipABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'pause', TMode>({ abi: membershipABI, functionName: 'pause', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useMembershipRenounceRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'renounceRole'>['request']['abi'], 'renounceRole', TMode> & {
        functionName?: 'renounceRole'
      }
    : UseContractWriteConfig<typeof membershipABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'renounceRole', TMode>({ abi: membershipABI, functionName: 'renounceRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useMembershipRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'revokeRole'>['request']['abi'], 'revokeRole', TMode> & {
        functionName?: 'revokeRole'
      }
    : UseContractWriteConfig<typeof membershipABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'revokeRole', TMode>({ abi: membershipABI, functionName: 'revokeRole', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"safeMint"`.
 */
export function useMembershipSafeMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'safeMint'>['request']['abi'], 'safeMint', TMode> & {
        functionName?: 'safeMint'
      }
    : UseContractWriteConfig<typeof membershipABI, 'safeMint', TMode> & {
        abi?: never
        functionName?: 'safeMint'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'safeMint', TMode>({ abi: membershipABI, functionName: 'safeMint', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useMembershipSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'safeTransferFrom'>['request']['abi'], 'safeTransferFrom', TMode> & {
        functionName?: 'safeTransferFrom'
      }
    : UseContractWriteConfig<typeof membershipABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'safeTransferFrom', TMode>({ abi: membershipABI, functionName: 'safeTransferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useMembershipSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'setApprovalForAll'>['request']['abi'], 'setApprovalForAll', TMode> & {
        functionName?: 'setApprovalForAll'
      }
    : UseContractWriteConfig<typeof membershipABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'setApprovalForAll', TMode>({
    abi: membershipABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useMembershipSetBaseUri<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'setBaseURI'>['request']['abi'], 'setBaseURI', TMode> & {
        functionName?: 'setBaseURI'
      }
    : UseContractWriteConfig<typeof membershipABI, 'setBaseURI', TMode> & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'setBaseURI', TMode>({ abi: membershipABI, functionName: 'setBaseURI', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function useMembershipSetDefaultRoyalty<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'setDefaultRoyalty'>['request']['abi'], 'setDefaultRoyalty', TMode> & {
        functionName?: 'setDefaultRoyalty'
      }
    : UseContractWriteConfig<typeof membershipABI, 'setDefaultRoyalty', TMode> & {
        abi?: never
        functionName?: 'setDefaultRoyalty'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'setDefaultRoyalty', TMode>({
    abi: membershipABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMembershipTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'transferFrom'>['request']['abi'], 'transferFrom', TMode> & {
        functionName?: 'transferFrom'
      }
    : UseContractWriteConfig<typeof membershipABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'transferFrom', TMode>({ abi: membershipABI, functionName: 'transferFrom', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"unpause"`.
 */
export function useMembershipUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof membershipABI, 'unpause'>['request']['abi'], 'unpause', TMode> & {
        functionName?: 'unpause'
      }
    : UseContractWriteConfig<typeof membershipABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any
) {
  return useContractWrite<typeof membershipABI, 'unpause', TMode>({ abi: membershipABI, functionName: 'unpause', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__.
 */
export function usePrepareMembershipWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, ...config } as UsePrepareContractWriteConfig<typeof membershipABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMembershipApprove(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'approve'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'approve', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMembershipBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"delegate"`.
 */
export function usePrepareMembershipDelegate(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'delegate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'delegate', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'delegate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"delegateBySig"`.
 */
export function usePrepareMembershipDelegateBySig(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'delegateBySig'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'delegateBySig', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'delegateBySig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareMembershipGrantRole(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'grantRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'grantRole', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'grantRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareMembershipPause(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'pause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'pause', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'pause'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareMembershipRenounceRole(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'renounceRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'renounceRole', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'renounceRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareMembershipRevokeRole(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'revokeRole'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'revokeRole', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'revokeRole'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"safeMint"`.
 */
export function usePrepareMembershipSafeMint(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'safeMint'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'safeMint', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'safeMint'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareMembershipSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareMembershipSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareMembershipSetBaseUri(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'setBaseURI'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'setBaseURI', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'setBaseURI'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function usePrepareMembershipSetDefaultRoyalty(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'setDefaultRoyalty'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'setDefaultRoyalty', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'setDefaultRoyalty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMembershipTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'transferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'transferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link membershipABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareMembershipUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof membershipABI, 'unpause'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: membershipABI, functionName: 'unpause', ...config } as UsePrepareContractWriteConfig<
    typeof membershipABI,
    'unpause'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__.
 */
export function useMembershipEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof membershipABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, ...config } as UseContractEventConfig<typeof membershipABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"Approval"`.
 */
export function useMembershipApprovalEvent(config: Omit<UseContractEventConfig<typeof membershipABI, 'Approval'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: membershipABI, eventName: 'Approval', ...config } as UseContractEventConfig<typeof membershipABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useMembershipApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"BaseURIChanged"`.
 */
export function useMembershipBaseUriChangedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'BaseURIChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'BaseURIChanged', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'BaseURIChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useMembershipDefaultRoyaltySetEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'DefaultRoyaltySet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'DefaultRoyaltySet', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'DefaultRoyaltySet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"DelegateChanged"`.
 */
export function useMembershipDelegateChangedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'DelegateChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'DelegateChanged', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'DelegateChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"DelegateVotesChanged"`.
 */
export function useMembershipDelegateVotesChangedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'DelegateVotesChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'DelegateVotesChanged', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'DelegateVotesChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"EIP712DomainChanged"`.
 */
export function useMembershipEip712DomainChangedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'EIP712DomainChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'EIP712DomainChanged', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'EIP712DomainChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"Paused"`.
 */
export function useMembershipPausedEvent(config: Omit<UseContractEventConfig<typeof membershipABI, 'Paused'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: membershipABI, eventName: 'Paused', ...config } as UseContractEventConfig<typeof membershipABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useMembershipRoleAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'RoleAdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'RoleAdminChanged', ...config } as UseContractEventConfig<
    typeof membershipABI,
    'RoleAdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useMembershipRoleGrantedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'RoleGranted'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'RoleGranted', ...config } as UseContractEventConfig<typeof membershipABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useMembershipRoleRevokedEvent(
  config: Omit<UseContractEventConfig<typeof membershipABI, 'RoleRevoked'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: membershipABI, eventName: 'RoleRevoked', ...config } as UseContractEventConfig<typeof membershipABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMembershipTransferEvent(config: Omit<UseContractEventConfig<typeof membershipABI, 'Transfer'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: membershipABI, eventName: 'Transfer', ...config } as UseContractEventConfig<typeof membershipABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link membershipABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useMembershipUnpausedEvent(config: Omit<UseContractEventConfig<typeof membershipABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: membershipABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<typeof membershipABI, 'Unpaused'>)
}
