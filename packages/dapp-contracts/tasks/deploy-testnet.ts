import { task } from 'hardhat/config'
import { BaseContract } from 'ethers'
import { writeLogs } from './utils/_write-logs'
import { WETH_GOERLI_ADDRESS } from './utils/_addresses'
import { getAddresses } from './utils/_getAddresses'

console.log('testnet')
type LocalContractName = 'Membership'
// type LocalContractName = 'ERC20Mock' | 'Membership' | 'Migration' | 'Auction'
type CombinedContract = Contract & BaseContract

interface Contract {
  args?: (string | number | (() => string | undefined) | (() => Promise<string>))[]
  instance?: CombinedContract
  libraries?: () => Record<string, string>
  waitForConfirmation?: boolean
}

task('deploy-testnet', 'Deploy contracts to testnet').setAction(async (_, { ethers, run }) => {
  const [deployer] = await ethers.getSigners()
  const { chainId } = await ethers.provider.getNetwork()
  const contractAddresses = await getAddresses(ethers.provider)

  const baseUri = 'ipfs://QmcF6KCccBHmEazNJW6MNgh9xJFBapLFdAefT19Uer4i43/'

  const contracts: Record<LocalContractName, Contract> = {
    // ERC20Mock: {
    //   args: [deployer.address, 'arod.studio Tokens', '$ARST', 1_000_000],
    //   waitForConfirmation: true,
    // },
    Membership: {
      args: [
        baseUri,
        deployer.address,
        deployer.address,
        500,
        'data:application/text;base64,cGFja2FnZSBjb20ubGFydmFsYWJzLnZveGVsZ2x5cGg7CgppbXBvcnQgamF2YS5pby5GaWxlT3V0cHV0U3RyZWFtOwppbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsKaW1wb3J0IGphdmEuaW8uUHJpbnRXcml0ZXI7CmltcG9ydCBqYXZhLm1hdGguQmlnSW50ZWdlcjsKCi8qKgogKiAgLyMjICAgIC8jIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8jIyAgICAgICAgICAgLyMjICAgICAgICAgICAgICAgICAgICAgLyMjICAgICAgCiAqIHwgIyMgICB8ICMjICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICMjICAgICAgICAgIHwgIyMgICAgICAgICAgICAgICAgICAgIHwgIyMgICAgICAKICogfCAjIyAgIHwgIyMgLyMjIyMjIyAgLyMjICAgLyMjICAvIyMjIyMjIHwgIyMgIC8jIyMjIyMgfCAjIyAvIyMgICAvIyMgIC8jIyMjIyMgfCAjIyMjIyMjIAogKiB8ICAjIyAvICMjLy8jI19fICAjI3wgICMjIC8jIy8gLyMjX18gICMjfCAjIyAvIyNfXyAgIyN8ICMjfCAjIyAgfCAjIyAvIyNfXyAgIyN8ICMjX18gICMjCiAqICBcICAjIyAjIy98ICMjICBcICMjIFwgICMjIyMvIHwgIyMjIyMjIyN8ICMjfCAjIyAgXCAjI3wgIyN8ICMjICB8ICMjfCAjIyAgXCAjI3wgIyMgIFwgIyMKICogICBcICAjIyMvIHwgIyMgIHwgIyMgID4jIyAgIyMgfCAjI19fX19fL3wgIyN8ICMjICB8ICMjfCAjI3wgIyMgIHwgIyN8ICMjICB8ICMjfCAjIyAgfCAjIwogKiAgICBcICAjLyAgfCAgIyMjIyMjLyAvIyMvXCAgIyN8ICAjIyMjIyMjfCAjI3wgICMjIyMjIyN8ICMjfCAgIyMjIyMjI3wgIyMjIyMjIy98ICMjICB8ICMjCiAqICAgICBcXy8gICAgXF9fX19fXy8gfF9fLyAgXF9fLyBcX19fX19fXy98X18vIFxfX19fICAjI3xfXy8gXF9fX18gICMjfCAjI19fX18vIHxfXy8gIHxfXy8KICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyMjICBcICMjICAgICAvIyMgIHwgIyN8ICMjICAgICAgICAgICAgICAgIAogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICMjIyMjIy8gICAgfCAgIyMjIyMjL3wgIyMgICAgICAgICAgICAgICAgCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxfX19fX18vICAgICAgXF9fX19fXy8gfF9fLwogKgogKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IExhcnZhIExhYnMgKE1hdHQgSGFsbCBhbmQgSm9obiBXYXRraW5zb24pCiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHBhcnRuZXJzaGlwIHdpdGggdGhlIEZpbmdlcnByaW50cyBEQU8KICoKICogVGhlIEZpbmdlcnByaW50cyBEQU8gb3ducyBBdXRvZ2x5cGggIzEzNCBhbmQgZGVyaXZlcyB0aGVpciBsb2dvIGZyb20gdGhlICJoYXNoIiBmaWd1cmUgYXQgaXRzIGNlbnRlci4gVGhlIGJlbG93IGNvZGUKICogZW1wbG95cyB0aGUgc2FtZSBraW5kIG9mIG1vZHVsYXIgZmllbGQgYXJpdGhtZXRpYyBhcyB0aGUgQXV0b2dseXBoIGdlbmVyYXRvciBpdHNlbGYgdG8gYWRkIGEgaGVpZ2h0IGZpZWxkIHRvIHRoaXMKICogQXV0b2dseXBoLCBjcmVhdGluZyBhIHRocmVlLWRpbWVuc2lvbmFsIHN0cnVjdHVyZSB0aGF0IHdlIGNhbGwgdGhlICJWb3hlbGdseXBoIi4KICoKICogVGhlIGZvbGxvd2luZyBKYXZhIHByb2dyYW0gZ2VuZXJhdGVzIHRoZSBWb3hlbGdseXBoIHdpdGggbm8gZGVwZW5kZW5jaWVzIGJleW9uZCBhIHN0YW5kYXJkIEphdmEgUnVudGltZSBFbnZpcm9ubWVudC4KICogVGhlIG91dHB1dCBpcyBhIHNlcmllcyBvZiAzRCBjby1vcmRpbmF0ZXMgdGhhdCBjb25zdHJ1Y3QgdGhlIG9iamVjdC4gVGhvc2UgY28tb3JkaW5hdGVzIGxpc3RlZCBhcmUgdG8gYmUgZmlsbGVkIHdpdGgKICogYSB3aGl0ZSBjdWJlLCBhbGwgb3RoZXIgY28tb3JkaW5hdGVzIGFyZSB0byBiZSBsZWZ0IGNsZWFyLgogKgogKiBUaGUgcmVzdWx0aW5nIG1vZGVsIGNhbiBiZSByZW5kZXJlZCwgYm90aCBwaHlzaWNhbGx5IGFuZCB2aXJ0dWFsbHksIGhvd2V2ZXIgdGhlIG93bmVyIGRlc2lyZXMuCiAqCiAqIEFueW9uZSBtYXkgZG8gYXMgdGhleSB3aXNoIHdpdGggdGhpcyBjb2RlLCBidXQgd2Ugd2lsbCBvbmx5IGNvbnNpZGVyIHRoZSBvdXRwdXQgb2YgdGhpcyBwcm9ncmFtIG9uIEF1dG9nbHlwaCAjMTM0IGFuZAogKiB3aXRoIHNlZWQgMjE1ODQ3OTI4Mzc0ODcxMTMgYXMgdGhlIG9uZSBhbmQgb25seSBWb3hlbGdseXBoLgogKi8KcHVibGljIGNsYXNzIFZveGVsZ2x5cGggewoKICAgIC8vIFRoZSBzeW1ib2xzIGluIEF1dG9nbHlwaCAjMTM0CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBjaGFyIFNZTUJPTF9CTEFOSyA9ICcuJzsKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGNoYXIgU1lNQk9MX0hPUklaT05UQUxfTElORSA9ICctJzsKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIGNoYXIgU1lNQk9MX1ZFUlRJQ0FMX0xJTkUgPSAnfCc7CiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBjaGFyIFNZTUJPTF9QTFVTID0gJysnOwoKICAgIC8vIE5vdCBhIHRyYWRpdGlvbmFsIGRlZmluaXRpb24gb2YgIm9uZSIsIGJ1dCBjb25zaXN0ZW50IHdpdGggdGhlIEF1dG9nbHlwaHMKICAgIHByaXZhdGUgc3RhdGljIGZpbmFsIEJpZ0ludGVnZXIgT05FID0gbmV3IEJpZ0ludGVnZXIoIjQyOTQ5NjcyOTYiKTsKCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBpbnQgR0xZUEhfU0laRSA9IDY0OwogICAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgaW50IE1BWF9IRUlHSFQgPSAzMjsKCiAgICBwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQVVUT0dMWVBIXzEzNCA9ICIiIgouLi4tLnwuLi4uLi4tLnwuLi4uLi4tLnwuLi4uLi4tLi4tLi4uLi4ufC4tLi4uLi4ufC4tLi4uLi4ufC4tLi4uCi4uLisuLi0uLnwufC4ufC4uLi4uLi4rLi4tLi4tLi58fC4uLS4uLS4uKy4uLi4uLi58Li58LnwuLi0uLisuLi4KLi4uLi0uLi4rfC4uLi4uLS4uLit8Li4uLi4tLi4uLi4uLi4uLi0uLi4uLnwrLi4uLS4uLi4ufCsuLi4tLi4uLgotKy4ufC0tKy4uLi4uLSsuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKy0uLi4uListLXwuListCi4uLXwuLi58Li4uLi4rLi58LisuLi4uLi4uLi0uLi4rKy4uLi0uLi4uLi4uLisufC4uKy4uLi4ufC4uLnwtLi4KfC4uLS58Li4uLi4uLi4uLi4uLi4uLi4uLisuLi4uKy4uKy4uLi4rLi4uLi4uLi4uLi4uLi4uLi4uLnwuLS4ufAouLS4tLi4tLi0uLnwuLS4uLS58Li58LnwuLnwuLi4uLi4uLi4ufC4ufC58Li58Li0uLi0ufC4uLS4tLi4tLi0uCi4uLit8Li4uLXwuLi4rfC4uLi0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi0uLi58Ky4uLnwtLi4ufCsuLi4KLi4rLi4uLS0rLnwtKy4ufC0uLnx8Li4uLi4uLi4uLi4uLi4uLi4uLi4uLnx8Li4tfC4uKy18ListLS4uLisuLgoufHwuLi4ufC4uLi4uLi4rLi4uLisuLi4uLi0uLi4uKysuLi4uLS4uLi4uKy4uLi4rLi4uLi4uLnwuLi4ufHwuCi4uLi4uLi4ufC58LS58Ky4rLi4rLi4uLi4uLnwuLi0uLi0uLnwuLi4uLi4uKy4uKy4rfC4tfC58Li4uLi4uLi4KLnwuLi4ufC4tLi0uKy4uLi4rLisuKy4uLi4uLi4uLnx8Li4uLi4uLi4uKy4rLisuLi4uKy4tLi0ufC4uLi58LgotLi4uLi4uLisuLit8Li4uKy4uLXwuLi4uLi4rLS4uLi4uLi0rLi4uLi4ufC0uLisuLi58Ky4uKy4uLi4uLi4tCi4uLi0rLi0rLi58Li4uLi4uLi4uLi58LSsufC4uLi4uLi4uLi58ListfC4uLi4uLi4uLi4ufC4uKy0uKy0uLi4KfHwuKy4uLnwuLisuLi4uLi4rLi4uLi4uKy0uLi4uLisrLi4uLi4tKy4uLi4uLisuLi4uLi4rLi58Li4uKy58fAouLi0uLi4uLnwrLi4uLi4tLi0uLi4uLnwtLi4uLi4tLi4tLi4uLi4tfC4uLi4uLS4tLi4uLi4rfC4uLi4uLS4uCi4uLi58Li0uLS4rLisuLi4uLi4ufC58LisuKy4uLi4uLi4uLi4rLisufC58Li4uLi4uLisuKy4tLi0ufC4uLi4KLi4uLi4uLi4uLi4rLi4rLS4rLS4uLS4uLi4uLnwuLi4uLi58Li4uLi4uLS4uLSsuLSsuLisuLi4uLi4uLi4uLgouLi4uKy58LS4uLi4uLi4uLi0uLi4uLi4uKy58LS4uLi4uLi18LisuLi4uLi4uLS4uLi4uLi4uLi18LisuLi4uCi4uKy4uLi4ufC4rKy0uLi4uLi4uKystLi4uLi4uLi4rKy4uLi4uLi4uLSsrLi4uLi4uLi0rKy58Li4uLi4rLi4KLi58Li4uLi58Ky4ufC4uLnwuLisuLnwuLi4tKy4ufC4ufC4uKy0uLi58Li4rLi58Li4ufC4uK3wuLi4uLnwuLgotLi4uLi58Li4uLisuLi4uLi0uKy4uLi4uLS4tLi4uLi4uLi4tLi0uLi4uLisuLS4uLi4uKy4uLi58Li4uLi4tCi4rLi4uLi4uLi4uLi58Li58Li4tfC4rLi4uLi4uLi4uLi4uLi4uLi4uKy58LS4ufC4ufC4uLi4uLi4uLi4uKy4KfC4uLi4ufC4uLi4uLi0ufC4uLi4uLi4uLi4uLi0uLi4uLi4tLi4uLi4uLi4uLi4ufC4tLi4uLi4ufC4uLi4ufAouLi4uLi4uLi4uLi4uKystKy4uLi4uLi4uLi4uLi4rLS0rLi4uLi4uLi4uLi4uListKysuLi4uLi4uLi4uLi4uCi4tLi4uKy4uLi4uLi4uLS4uLisuLi0uLi4tLi4uLi4uLi4uLi4uLS4uLi0uLisuLi4tLi4uLi4uLi4rLi4uLS4KLi4tLi4ufC4uLS4uLnwuLisuLi4tLi4uLi4uLS4rLi4uLisuLS4uLi4uLi0uLi4rLi58Li4uLS4ufC4uLi0uLgouLi4uLS4uLi4ufC4rLi4uLi58ListLi4uLi0uLisuLi4uKy4uLS4uLi4tKy58Li4uLi4rLnwuLi4uLi0uLi4uCi4tLi4uLi4uLi4uLi0uLi4ufC0uLi4uLS4uLi4uKy4uLi4rLi4uLi4tLi4uLi18Li4uLi0uLi4uLi4uLi4uLS4KLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4rKysrLSsrLSsrKysuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLgotLi4uLisuLi4uLS4uLi4tLi4uLnwuLi4rLi4uLi0uLi4uLS4uLi4rLi4ufC4uLi4tLi4uLi0uLi4uKy4uLi4tCi58Li4rLi4uLisufC4uKy4uLi4rLi4uLi0uLi4uKy4uLi4rLi4uLi0uLi4uKy4uLi4rLi58LisuLi4uKy4ufC4KLnwuLisuLi4uKy58Li4rLi4uLisuLi4uLS4uLi4rLi4uLisuLi4uLS4uLi4rLi4uLisuLnwuKy4uLi4rLi58LgotLi4uLisuLi4uLS4uLi4tLi4uLnwuLi4rLi4uLi0uLi4uLS4uLi4rLi4ufC4uLi4tLi4uLi0uLi4uKy4uLi4tCi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKysrKy0rKy0rKysrLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4KLi0uLi4uLi4uLi4uLS4uLi58LS4uLi4tLi4uLi4rLi4uLisuLi4uLi0uLi4uLXwuLi4uLS4uLi4uLi4uLi4tLgouLi4uLS4uLi4ufC4rLi4uLi58ListLi4uLi0uLisuLi4uKy4uLS4uLi4tKy58Li4uLi4rLnwuLi4uLi0uLi4uCi4uLS4uLnwuLi0uLi58Li4rLi4uLS4uLi4uLi0uKy4uLi4rLi0uLi4uLi4tLi4uKy4ufC4uLi0uLnwuLi4tLi4KLi0uLi4rLi4uLi4uLi4tLi4uKy4uLS4uLi0uLi4uLi4uLi4uLi4tLi4uLS4uKy4uLi0uLi4uLi4uLisuLi4tLgouLi4uLi4uLi4uLi4uKystKy4uLi4uLi4uLi4uLi4rLS0rLi4uLi4uLi4uLi4uListKysuLi4uLi4uLi4uLi4uCnwuLi4uLnwuLi4uLi4tLnwuLi4uLi4uLi4uLi4tLi4uLi4uLS4uLi4uLi4uLi4uLnwuLS4uLi4uLnwuLi4uLnwKLisuLi4uLi4uLi4uLnwuLnwuLi18LisuLi4uLi4uLi4uLi4uLi4uLi4rLnwtLi58Li58Li4uLi4uLi4uLi4rLgotLi4uLi58Li4uLisuLi4uLi0uKy4uLi4uLS4tLi4uLi4uLi4tLi0uLi4uLisuLS4uLi4uKy4uLi58Li4uLi4tCi4ufC4uLi4ufCsuLnwuLi58Li4rLi58Li4uLSsuLnwuLnwuListLi4ufC4uKy4ufC4uLnwuLit8Li4uLi58Li4KLi4rLi4uLi58LisrLS4uLi4uLi4rKy0uLi4uLi4uLisrLi4uLi4uLi4tKysuLi4uLi4uLSsrLnwuLi4uLisuLgouLi4uKy58LS4uLi4uLi4uLi0uLi4uLi4uKy58LS4uLi4uLi18LisuLi4uLi4uLS4uLi4uLi4uLi18LisuLi4uCi4uLi4uLi4uLi4uKy4uKy0uKy0uLi0uLi4uLi58Li4uLi4ufC4uLi4uLi0uLi0rLi0rLi4rLi4uLi4uLi4uLi4KLi4uLnwuLS4tLisuKy4uLi4uLi58LnwuKy4rLi4uLi4uLi4uLisuKy58LnwuLi4uLi4uKy4rLi0uLS58Li4uLgouLi0uLi4uLnwrLi4uLi4tLi0uLi4uLnwtLi4uLi4tLi4tLi4uLi4tfC4uLi4uLS4tLi4uLi4rfC4uLi4uLS4uCnx8LisuLi58Li4rLi4uLi4uKy4uLi4uListLi4uLi4rKy4uLi4uLSsuLi4uLi4rLi4uLi4uKy4ufC4uLisufHwKLi4uLSsuLSsuLnwuLi4uLi4uLi4uLnwtKy58Li4uLi4uLi4uLnwuKy18Li4uLi4uLi4uLi58Li4rLS4rLS4uLgotLi4uLi4uLisuLit8Li4uKy4uLXwuLi4uLi4rLS4uLi4uLi0rLi4uLi4ufC0uLisuLi58Ky4uKy4uLi4uLi4tCi58Li4uLnwuLS4tLisuLi4uKy4rLisuLi4uLi4uLi58fC4uLi4uLi4uLisuKy4rLi4uLisuLS4tLnwuLi4ufC4KLi4uLi4uLi58LnwtLnwrLisuLisuLi4uLi4ufC4uLS4uLS4ufC4uLi4uLi4rLi4rLit8Li18LnwuLi4uLi4uLgoufHwuLi4ufC4uLi4uLi4rLi4uLisuLi4uLi0uLi4uKysuLi4uLS4uLi4uKy4uLi4rLi4uLi4uLnwuLi4ufHwuCi4uKy4uLi0tKy58LSsuLnwtLi58fC4uLi4uLi4uLi4uLi4uLi4uLi4uLi58fC4uLXwuListfC4rLS0uLi4rLi4KLi4uK3wuLi4tfC4uLit8Li4uLS4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLS4uLnwrLi4ufC0uLi58Ky4uLgouLS4tLi4tLi0uLnwuLS4uLS58Li58LnwuLnwuLi4uLi4uLi4ufC4ufC58Li58Li0uLi0ufC4uLS4tLi4tLi0uCnwuLi0ufC4uLi4uLi4uLi4uLi4uLi4uLi4rLi4uLisuLisuLi4uKy4uLi4uLi4uLi4uLi4uLi4uLi58Li0uLnwKLi4tfC4uLnwuLi4uLisuLnwuKy4uLi4uLi4uLS4uLisrLi4uLS4uLi4uLi4uKy58Li4rLi4uLi58Li4ufC0uLgotKy4ufC0tKy4uLi4uLSsuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKy0uLi4uListLXwuListCi4uLi4tLi4uK3wuLi4uLi0uLi4rfC4uLi4uLS4uLi4uLi4uLi4tLi4uLi58Ky4uLi0uLi4uLnwrLi4uLS4uLi4KLi4uKy4uLS4ufC58Li58Li4uLi4uLisuLi0uLi0uLnx8Li4tLi4tLi4rLi4uLi4uLnwuLnwufC4uLS4uKy4uLgouLi4tLnwuLi4uLi4tLnwuLi4uLi4tLnwuLi4uLi4tLi4tLi4uLi4ufC4tLi4uLi4ufC4tLi4uLi4ufC4tLi4uCiIiIjsKCiAgICBwcml2YXRlIHN0YXRpYyBjbGFzcyBNb2RlbCB7CgogICAgICAgIC8vIFRoZSBjby1vcmRpbmF0ZXMgeCwgeSBhbmQgeiBjb3JyZXNwb25kIHRvIHdpZHRoLCBkZXB0aCwgYW5kIGhlaWdodAogICAgICAgIGludCB4U2l6ZSwgeVNpemUsIHpTaXplOwoKICAgICAgICAvLyBUaGUgM0QgbW9kZWwKICAgICAgICBib29sZWFuW11bXVtdIGNlbGxzOwoKICAgICAgICBNb2RlbChpbnQgeFNpemUsIGludCB5U2l6ZSwgaW50IHpTaXplKSB7CiAgICAgICAgICAgIHRoaXMueFNpemUgPSB4U2l6ZTsKICAgICAgICAgICAgdGhpcy55U2l6ZSA9IHlTaXplOwogICAgICAgICAgICB0aGlzLnpTaXplID0gelNpemU7CiAgICAgICAgICAgIGNlbGxzID0gbmV3IGJvb2xlYW5beFNpemVdW3lTaXplXVt6U2l6ZV07CiAgICAgICAgfQoKICAgICAgICB2b2lkIHNldChpbnQgeCwgaW50IHksIGludCB6KSB7CiAgICAgICAgICAgIGNlbGxzW3hdW3ldW3pdID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZvaWQgY2xlYXIoaW50IHgsIGludCB5LCBpbnQgeikgewogICAgICAgICAgICBjZWxsc1t4XVt5XVt6XSA9IGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIFN0cmluZyB0b1N0cmluZygpIHsKICAgICAgICAgICAgU3RyaW5nQnVpbGRlciBzYiA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CiAgICAgICAgICAgIGZvciAoaW50IHogPSAwOyB6IDwgelNpemU7IHorKykgewogICAgICAgICAgICAgICAgZm9yIChpbnQgeSA9IDA7IHkgPCB5U2l6ZTsgeSsrKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpbnQgeCA9IDA7IHggPCB4U2l6ZTsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsc1t4XVt5XVt6XSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2IuYXBwZW5kKCIoIikuYXBwZW5kKHgpLmFwcGVuZCgiLCAiKS5hcHBlbmQoeSkuYXBwZW5kKCIsICIpLmFwcGVuZCh6KS5hcHBlbmQoIilcbiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBzYi50b1N0cmluZygpOwogICAgICAgIH0KICAgIH0KCiAgICBwcml2YXRlIHN0YXRpYyBjaGFyIGdseXBoU3ltYm9sQXQoaW50IHgsIGludCB5KSB7CiAgICAgICAgaW50IGluZGV4ID0geSAqIChHTFlQSF9TSVpFICsgMSkgKyB4OwogICAgICAgIHJldHVybiBBVVRPR0xZUEhfMTM0LmNoYXJBdChpbmRleCk7CiAgICB9CgogICAgLy8gV3JpdGUgdGhlIGFwcHJvcHJpYXRlIHZveGVscyBmb3IgdGhlIGdseXBoIHN5bWJvbCBhdCB4LCB5LCBhbmQgegogICAgcHJpdmF0ZSBzdGF0aWMgdm9pZCB3cml0ZVZveGVsc0ZvclN5bWJvbEF0KE1vZGVsIG1vZGVsLCBpbnQgeCwgaW50IHksIGludCB6KSB7CiAgICAgICAgY2hhciBzeW1ib2wgPSBnbHlwaFN5bWJvbEF0KHgsIHkpOwogICAgICAgIHggKj0gMzsKICAgICAgICB6ICo9IDI7CiAgICAgICAgeSAqPSAzOwogICAgICAgIGlmIChzeW1ib2wgPT0gU1lNQk9MX1BMVVMpIHsKICAgICAgICAgICAgZm9yIChpbnQgenogPSB6OyB6eiA8IHogKyAyOyB6eisrKSB7CiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0KHggKyAxLCB5LCB6eik7CiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0KHggKyAxLCB5ICsgMiwgenopOwogICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldCh4LCB5ICsgMSwgenopOwogICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldCh4ICsgMiwgeSArIDEsIHp6KTsKICAgICAgICAgICAgICAgICAgICBtb2RlbC5zZXQoeCArIDEsIHkgKyAxLCB6eik7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbCA9PSBTWU1CT0xfSE9SSVpPTlRBTF9MSU5FKSB7CiAgICAgICAgICAgIGZvciAoaW50IHp6ID0gejsgenogPCB6ICsgMjsgenorKykgewogICAgICAgICAgICAgICAgbW9kZWwuc2V0KHgsIHkgKyAxLCB6eik7CiAgICAgICAgICAgICAgICBtb2RlbC5zZXQoeCArIDEsIHkgKyAxLCB6eik7CiAgICAgICAgICAgICAgICBtb2RlbC5zZXQoeCArIDIsIHkgKyAxLCB6eik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbW9kZWwuY2xlYXIoeCArIDEsIHkgKyAxLCB6KTsKICAgICAgICB9IGVsc2UgaWYgKHN5bWJvbCA9PSBTWU1CT0xfVkVSVElDQUxfTElORSkgewogICAgICAgICAgICBmb3IgKGludCB6eiA9IHo7IHp6IDwgeiArIDI7IHp6KyspIHsKICAgICAgICAgICAgICAgIG1vZGVsLnNldCh4ICsgMSwgeSwgenopOwogICAgICAgICAgICAgICAgbW9kZWwuc2V0KHggKyAxLCB5ICsgMSwgenopOwogICAgICAgICAgICAgICAgbW9kZWwuc2V0KHggKyAxLCB5ICsgMiwgenopOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG1vZGVsLmNsZWFyKHggKyAxLCB5ICsgMSwgeik7CiAgICAgICAgfQogICAgfQoKICAgIC8qICoqKioqKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqICoqKioqKiAqLwoKICAgIC8vIFRoZSBmb2xsb3dpbmcgY29kZSBnZW5lcmF0ZXMgYXJ0LgoKICAgIHByaXZhdGUgc3RhdGljIE1vZGVsIGNyZWF0ZVZveGVsR2x5cGgoQmlnSW50ZWdlciBhKSB7CiAgICAgICAgLy8gRWFjaCBjZWxsIG9mIHRoZSBBdXRvZ2x5cGggYmVjb21lcyBhIDN4M3hOIHRvd2VyIGluIHRoZSBWb3hlbGdseXBoLCB3aXRoIHRvd2VyIGhlaWdodCBpbiBpbmNyZW1lbnRzIG9mIDIKICAgICAgICBCaWdJbnRlZ2VyIGZpZWxkID0gQmlnSW50ZWdlci52YWx1ZU9mKDMxKTsKICAgICAgICBNb2RlbCBtb2RlbCA9IG5ldyBNb2RlbChHTFlQSF9TSVpFICogMywgR0xZUEhfU0laRSAqIDMsIE1BWF9IRUlHSFQgKiAyKTsKICAgICAgICBmb3IgKGludCB4ID0gMDsgeCA8IEdMWVBIX1NJWkU7IHgrKykgewogICAgICAgICAgICBpbnQgcHggPSBNYXRoLm1pbih4ICsgMSwgR0xZUEhfU0laRSAtIHgpOwogICAgICAgICAgICBpbnQgeHggPSBweCAtIDE7CiAgICAgICAgICAgIGZvciAoaW50IHkgPSAwOyB5IDwgR0xZUEhfU0laRTsgeSsrKSB7CiAgICAgICAgICAgICAgICBpZiAoZ2x5cGhTeW1ib2xBdCh4LCB5KSAhPSBTWU1CT0xfQkxBTkspIHsKICAgICAgICAgICAgICAgICAgICBpbnQgcHkgPSBNYXRoLm1pbih5ICsgMSwgR0xZUEhfU0laRSAtIHkpOwogICAgICAgICAgICAgICAgICAgIC8vIEVuY291cmFnZSBhIHJvdWdobHkgcHlyYW1pZGFsIHNoYXBlCiAgICAgICAgICAgICAgICAgICAgaW50IHAgPSBNYXRoLm1pbihweCwgcHkpICogNSAvIDQ7CiAgICAgICAgICAgICAgICAgICAgaW50IHl5ID0gcHkgLSAxOwogICAgICAgICAgICAgICAgICAgIGludCBwcm9kdWN0ID0geHggKiB5eTsKICAgICAgICAgICAgICAgICAgICAvLyBNb2R1bGFyIGZpZWxkIHN0dWZmCiAgICAgICAgICAgICAgICAgICAgaW50IGggPSBCaWdJbnRlZ2VyLnZhbHVlT2YocHJvZHVjdCkubXVsdGlwbHkoYSkuZGl2aWRlKE9ORSkubW9kKGZpZWxkKS5pbnRWYWx1ZSgpOwogICAgICAgICAgICAgICAgICAgIGludCBsID0gcHggKiBweTsKICAgICAgICAgICAgICAgICAgICBpbnQgaGVpZ2h0ID0gTWF0aC5taW4oaCAqIHAgLyAyOSArIDEsIDI2KTsKICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgKyAobCAvIDc1MCkgKiAocCAqIE1BWF9IRUlHSFQgLyA0MCAtIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSB0b3dlcgogICAgICAgICAgICAgICAgICAgIGZvciAoaW50IHogPSAwOyB6IDwgaGVpZ2h0OyB6KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVWb3hlbHNGb3JTeW1ib2xBdChtb2RlbCwgeCwgeSwgeik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBtb2RlbDsKICAgIH0KCiAgICAvKiAqKioqKiogKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqKioqKiogKi8KCiAgICAvLyBSdW4gdGhlIGdlbmVyYXRvcgogICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIElPRXhjZXB0aW9uIHsKICAgICAgICAvLyBTZWVkIHNlbGVjdGVkIGZvciBhZXN0aGV0aWNzCiAgICAgICAgQmlnSW50ZWdlciBzZWVkID0gbmV3IEJpZ0ludGVnZXIoIjIxNTg0NzkyODM3NDg3MTEzIik7CiAgICAgICAgTW9kZWwgbW9kZWwgPSBjcmVhdGVWb3hlbEdseXBoKHNlZWQpOwogICAgICAgIFByaW50V3JpdGVyIG91dCA9IG5ldyBQcmludFdyaXRlcihuZXcgRmlsZU91dHB1dFN0cmVhbSgidm94ZWxnbHlwaC50eHQiKSk7CiAgICAgICAgb3V0LnByaW50KG1vZGVsLnRvU3RyaW5nKCkpOwogICAgICAgIG91dC5jbG9zZSgpOwogICAgfQp9Cg==',
      ],
      waitForConfirmation: true,
    },
    // Migration: {
    //   args: [
    //     deployer.address,
    //     async () => {
    //       const address = await contracts.Membership?.instance?.getAddress()
    //       return address || ''
    //     },
    //     async () => {
    //       const address = await contracts.ERC20Mock?.instance?.getAddress()
    //       return address || ''
    //     },
    //     ethers.parseEther('5000').toString(),
    //   ],
    //   waitForConfirmation: true,
    // },
    // Auction: {
    //   args: [
    //     deployer.address,
    //     async () => await contracts.Membership.instance!.getAddress(),
    //     1,
    //     deployer.address,
    //   ],
    //   waitForConfirmation: true,
    // },
  }

  for (const [name, contract] of Object.entries(contracts)) {
    const factory = await ethers.getContractFactory(name, {
      libraries: contract?.libraries?.(),
    })

    const deployedContract = await factory.deploy(
      ...(contract.args?.map((a) => (typeof a === 'function' ? a() : a)) ?? []),
    )

    if (contract.waitForConfirmation) {
      await deployedContract.waitForDeployment()
    }
    contracts[name as LocalContractName].instance = deployedContract

    console.log(`${name} contract deployed to ${await deployedContract.getAddress()}`)
  }

  // writeLogs(
  //   chainId,
  //   await contracts.ERC20Mock.instance!.getAddress(),
  //   await contracts.Membership.instance!.getAddress(),
  //   await contracts.Migration.instance!.getAddress(),
  //   await contracts.Auction.instance!.getAddress(),
  //   WETH_GOERLI_ADDRESS,
  // )
  writeLogs(
    chainId,
    contractAddresses.ERC20Mock,
    await contracts.Membership.instance!.getAddress(),
    contractAddresses.Migration,
    contractAddresses.Auction,
    WETH_GOERLI_ADDRESS,
  )

  // await run('grant-role', {
  //   address: await contracts.Migration.instance!.getAddress(),
  //   role: 'MINTER_ROLE',
  // })

  // await run('mint-tokens', {
  //   mintTo: deployer.address,
  // })
  // await run('unpause-migration')

  // await run('migrate', {
  //   mintTo: await contracts.Auction?.instance?.getAddress(),
  // })

  // const now = Math.floor(Date.now() / 1000)
  // const oneDayInSeconds = 86400
  // await run('set-auction-config', {
  //   startTime: now,
  //   endTime: now + oneDayInSeconds,
  //   minBidIncrementInWei: ethers.parseEther('0.1').toString(),
  //   startAmountInWei: ethers.toBigInt(100).toString(),
  // })

  return contracts
})

// yarn hardhat verify --network goerli 0xD8Fd48493620eF2B2B41aAC5a5Dab0d1861143d0 'ipfs://QmcF6KCccBHmEazNJW6MNgh9xJFBapLFdAefT19Uer4i43/' "0x4183d511d71dba4d9b0dddf2e646887ab586d40c" "0x4183d511d71dba4d9b0dddf2e646887ab586d40c" "500"
